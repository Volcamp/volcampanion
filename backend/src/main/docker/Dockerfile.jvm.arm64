####
# This Dockerfile is used for Apple Silicon (ARM64) machines
# It uses ARM64-compatible base images to avoid SIGILL errors
#
# Build with:
# docker build -f src/main/docker/Dockerfile.jvm.arm64 -t quarkus/back-end .
#
###
FROM --platform=linux/arm64 maven:3-eclipse-temurin-21-alpine AS build
ARG DEPLOYMENT_PROFILE
RUN mkdir /app
WORKDIR /app
COPY . /app
RUN mvn clean package -DskipTests -Dquarkus.profile=${DEPLOYMENT_PROFILE}

FROM --platform=linux/arm64 eclipse-temurin:21-jre-alpine AS runtime
ENV LANGUAGE='en_US:en'

# Create application user
RUN addgroup -g 185 -S jboss && adduser -u 185 -S -G jboss jboss

# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --from=build --chown=185:185 /app/target/quarkus-app/lib/ /deployments/lib/
COPY --from=build --chown=185:185 /app/target/quarkus-app/*.jar /deployments/
COPY --from=build --chown=185:185 /app/target/quarkus-app/app/ /deployments/app/
COPY --from=build --chown=185:185 /app/target/quarkus-app/quarkus/ /deployments/quarkus/

EXPOSE 8080
USER 185
ENV JAVA_OPTS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
ENV JAVA_APP_JAR="/deployments/quarkus-run.jar"

# Use direct java execution instead of run-java.sh to avoid potential compatibility issues
CMD ["java", "-jar", "/deployments/quarkus-run.jar"]
